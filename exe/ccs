#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'ccs'
require 'yaml'
require 'optparse'
require 'io/console'

options = {
  'access_token' => ENV['CCS_ACCESS_TOKEN'],
  'passphrase' => ENV['CCS_PASSPHRASE']
}

option_parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: ccs [COMMAND [OPTIONS]]'

  option_parser.separator ''
  option_parser.separator 'Configuration Control System (CCS)'
  option_parser.separator ''
  option_parser.separator 'Commands:'
  option_parser.separator '    cp                               Copy'

  option_parser.separator ''
  option_parser.separator format('Version: %<version>s', version: Ccs::VERSION)
end

case ARGV.shift
when 'cp'
  option_parser = OptionParser.new do |option_parser|
    option_parser.banner = 'Usage: ccs cp [OPTIONS] <(LocalPath|STDIN)|(CCSUri|Uri)> <(CCSUri|Uri)|(LocalPath|STDOUT)>'
    option_parser.separator ''
    option_parser.separator 'Configuration Control System (CCS) - Copy'
    option_parser.separator ''
    option_parser.separator 'Options:'

    option_parser.on('-a CCS_ACCESS_TOKEN', '--access-token CCS_ACCESS_TOKEN', String, 'CCS Access Token') do |v|
      options['access_token'] = v
    end

    option_parser.on('-p CCS_PASSPHRASE', '--passphrase CCS_PASSPHRASE', String, 'CCS Passphrase') do |v|
      options['passphrase'] = v
    end

    option_parser.on('-f', '--[no-]force', 'Overwrite remote documents when uploading') do |v|
      options['force'] = v
    end

    option_parser.separator ''
    option_parser.separator 'Configure via environment variables:'
    option_parser.separator '  CCS_ACCESS_TOKEN'
    option_parser.separator '  CCS_PASSPHRASE'

    option_parser.separator ''
    option_parser.separator 'Examples:'
    option_parser.separator '  Download to STDOUT'
    option_parser.separator '    ccs cp ccs://workspace-name/0.1.0/path/to/file.yml -'
    option_parser.separator '    ccs cp http://host.tld:9292/workspace-name/0.1.0/path/to/file.yml -'
    option_parser.separator '    ccs cp https://host.tld/workspace-name/0.1.0/path/to/file.yml -'
    option_parser.separator '  Download to local file'
    option_parser.separator '    ccs cp ccs://workspace-name/0.1.0/path/to/file.yml /local/path/to/file.yml'
    option_parser.separator '  Upload local file'
    option_parser.separator '    ccs cp /local/path/to/file.yml ccs://workspace-name/0.1.0/path/to/file.yml'
    option_parser.separator '  Upload local file, overwriting remote document if any'
    option_parser.separator '    ccs cp --force /local/path/to/file.yml ccs://workspace-name/0.1.0/path/to/file.yml'
    option_parser.separator '  Upload content from STDIN'
    option_parser.separator '    echo "{ a: 1 }" | ccs cp  - ccs://workspace-name/0.1.0/path/to/file.yml'
    option_parser.separator '    cat /local/path/to/file.yml | ccs cp - ccs://workspace-name/0.1.0/path/to/file.yml'
    option_parser.separator ''

    option_parser.separator format('Version: %<version>s', version: Ccs::VERSION)
  end

  arguments = option_parser.parse!

  unless options.values.any?
    puts option_parser
    exit(1)
  end

  raise OptionParser::MissingArgument, 'access_token' unless options['access_token']
  raise OptionParser::MissingArgument, 'passphrase' unless options['passphrase']
  raise OptionParser::MissingArgument, 'source' unless arguments.fetch(0, nil)
  raise OptionParser::MissingArgument, 'destination' unless arguments.fetch(1, nil)

  exit(1) unless Ccs::Commands::Copy.new(arguments[0], arguments[1], options['access_token'], options['passphrase'], force: options.fetch('force', false)).call
else
  puts option_parser
  exit(1)
end
